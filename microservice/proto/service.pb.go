// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package microservice is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	RequestAsiento
	Asiento
	Evento
	RequestEvento
*/
package microservice

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type RequestAsiento struct {
	LocalidadId string `protobuf:"bytes,1,opt,name=localidad_id" json:"localidad_id,omitempty"`
}

func (m *RequestAsiento) Reset()         { *m = RequestAsiento{} }
func (m *RequestAsiento) String() string { return proto.CompactTextString(m) }
func (*RequestAsiento) ProtoMessage()    {}

type Asiento struct {
	Id          int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Categoria   string `protobuf:"bytes,2,opt,name=categoria" json:"categoria,omitempty"`
	Descripcion string `protobuf:"bytes,3,opt,name=descripcion" json:"descripcion,omitempty"`
}

func (m *Asiento) Reset()         { *m = Asiento{} }
func (m *Asiento) String() string { return proto.CompactTextString(m) }
func (*Asiento) ProtoMessage()    {}

type Evento struct {
	Id            int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Nombre        string `protobuf:"bytes,2,opt,name=nombre" json:"nombre,omitempty"`
	FechaCreacion string `protobuf:"bytes,3,opt,name=fechaCreacion" json:"fechaCreacion,omitempty"`
	TipoLocalidad string `protobuf:"bytes,4,opt,name=tipoLocalidad" json:"tipoLocalidad,omitempty"`
	LocalidadId   int64  `protobuf:"varint,5,opt,name=localidad_id" json:"localidad_id,omitempty"`
	Descripcion   string `protobuf:"bytes,6,opt,name=descripcion" json:"descripcion,omitempty"`
}

func (m *Evento) Reset()         { *m = Evento{} }
func (m *Evento) String() string { return proto.CompactTextString(m) }
func (*Evento) ProtoMessage()    {}

type RequestEvento struct {
}

func (m *RequestEvento) Reset()         { *m = RequestEvento{} }
func (m *RequestEvento) String() string { return proto.CompactTextString(m) }
func (*RequestEvento) ProtoMessage()    {}

func init() {
}

// Client API for Micro service

type MicroClient interface {
	// rpc Ping (PingRequest) returns (PingReply) {}
	GetEventos(ctx context.Context, in *RequestEvento, opts ...grpc.CallOption) (Micro_GetEventosClient, error)
	GetAsientos(ctx context.Context, in *RequestAsiento, opts ...grpc.CallOption) (Micro_GetAsientosClient, error)
}

type microClient struct {
	cc *grpc.ClientConn
}

func NewMicroClient(cc *grpc.ClientConn) MicroClient {
	return &microClient{cc}
}

func (c *microClient) GetEventos(ctx context.Context, in *RequestEvento, opts ...grpc.CallOption) (Micro_GetEventosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Micro_serviceDesc.Streams[0], c.cc, "/microservice.Micro/GetEventos", opts...)
	if err != nil {
		return nil, err
	}
	x := &microGetEventosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Micro_GetEventosClient interface {
	Recv() (*Evento, error)
	grpc.ClientStream
}

type microGetEventosClient struct {
	grpc.ClientStream
}

func (x *microGetEventosClient) Recv() (*Evento, error) {
	m := new(Evento)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *microClient) GetAsientos(ctx context.Context, in *RequestAsiento, opts ...grpc.CallOption) (Micro_GetAsientosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Micro_serviceDesc.Streams[1], c.cc, "/microservice.Micro/GetAsientos", opts...)
	if err != nil {
		return nil, err
	}
	x := &microGetAsientosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Micro_GetAsientosClient interface {
	Recv() (*Asiento, error)
	grpc.ClientStream
}

type microGetAsientosClient struct {
	grpc.ClientStream
}

func (x *microGetAsientosClient) Recv() (*Asiento, error) {
	m := new(Asiento)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Micro service

type MicroServer interface {
	// rpc Ping (PingRequest) returns (PingReply) {}
	GetEventos(*RequestEvento, Micro_GetEventosServer) error
	GetAsientos(*RequestAsiento, Micro_GetAsientosServer) error
}

func RegisterMicroServer(s *grpc.Server, srv MicroServer) {
	s.RegisterService(&_Micro_serviceDesc, srv)
}

func _Micro_GetEventos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestEvento)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MicroServer).GetEventos(m, &microGetEventosServer{stream})
}

type Micro_GetEventosServer interface {
	Send(*Evento) error
	grpc.ServerStream
}

type microGetEventosServer struct {
	grpc.ServerStream
}

func (x *microGetEventosServer) Send(m *Evento) error {
	return x.ServerStream.SendMsg(m)
}

func _Micro_GetAsientos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestAsiento)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MicroServer).GetAsientos(m, &microGetAsientosServer{stream})
}

type Micro_GetAsientosServer interface {
	Send(*Asiento) error
	grpc.ServerStream
}

type microGetAsientosServer struct {
	grpc.ServerStream
}

func (x *microGetAsientosServer) Send(m *Asiento) error {
	return x.ServerStream.SendMsg(m)
}

var _Micro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "microservice.Micro",
	HandlerType: (*MicroServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEventos",
			Handler:       _Micro_GetEventos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAsientos",
			Handler:       _Micro_GetAsientos_Handler,
			ServerStreams: true,
		},
	},
}
